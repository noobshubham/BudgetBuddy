// Generated by view binder compiler. Do not edit!
package com.example.budgetbuddy.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetbuddy.R;
import com.github.mikephil.charting.charts.PieChart;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAnalysisBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final RecyclerView analysisRecyclerview;

  @NonNull
  public final MaterialCardView analysisTypeCardView;

  @NonNull
  public final Chip chipCustom;

  @NonNull
  public final ChipGroup chipGroup;

  @NonNull
  public final LinearLayout chipLayout;

  @NonNull
  public final Chip chipMonthly;

  @NonNull
  public final Chip chipWeekly;

  @NonNull
  public final TextView expenseAnalysisText;

  @NonNull
  public final PieChart fragmentPieChart;

  @NonNull
  public final MaterialCardView pieCardView;

  private FragmentAnalysisBinding(@NonNull ScrollView rootView,
      @NonNull RecyclerView analysisRecyclerview, @NonNull MaterialCardView analysisTypeCardView,
      @NonNull Chip chipCustom, @NonNull ChipGroup chipGroup, @NonNull LinearLayout chipLayout,
      @NonNull Chip chipMonthly, @NonNull Chip chipWeekly, @NonNull TextView expenseAnalysisText,
      @NonNull PieChart fragmentPieChart, @NonNull MaterialCardView pieCardView) {
    this.rootView = rootView;
    this.analysisRecyclerview = analysisRecyclerview;
    this.analysisTypeCardView = analysisTypeCardView;
    this.chipCustom = chipCustom;
    this.chipGroup = chipGroup;
    this.chipLayout = chipLayout;
    this.chipMonthly = chipMonthly;
    this.chipWeekly = chipWeekly;
    this.expenseAnalysisText = expenseAnalysisText;
    this.fragmentPieChart = fragmentPieChart;
    this.pieCardView = pieCardView;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAnalysisBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAnalysisBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_analysis, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAnalysisBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.analysis_recyclerview;
      RecyclerView analysisRecyclerview = ViewBindings.findChildViewById(rootView, id);
      if (analysisRecyclerview == null) {
        break missingId;
      }

      id = R.id.analysis_type_card_view;
      MaterialCardView analysisTypeCardView = ViewBindings.findChildViewById(rootView, id);
      if (analysisTypeCardView == null) {
        break missingId;
      }

      id = R.id.chip_custom;
      Chip chipCustom = ViewBindings.findChildViewById(rootView, id);
      if (chipCustom == null) {
        break missingId;
      }

      id = R.id.chip_group;
      ChipGroup chipGroup = ViewBindings.findChildViewById(rootView, id);
      if (chipGroup == null) {
        break missingId;
      }

      id = R.id.chip_layout;
      LinearLayout chipLayout = ViewBindings.findChildViewById(rootView, id);
      if (chipLayout == null) {
        break missingId;
      }

      id = R.id.chip_monthly;
      Chip chipMonthly = ViewBindings.findChildViewById(rootView, id);
      if (chipMonthly == null) {
        break missingId;
      }

      id = R.id.chip_weekly;
      Chip chipWeekly = ViewBindings.findChildViewById(rootView, id);
      if (chipWeekly == null) {
        break missingId;
      }

      id = R.id.expense_analysis_text;
      TextView expenseAnalysisText = ViewBindings.findChildViewById(rootView, id);
      if (expenseAnalysisText == null) {
        break missingId;
      }

      id = R.id.fragment_pie_chart;
      PieChart fragmentPieChart = ViewBindings.findChildViewById(rootView, id);
      if (fragmentPieChart == null) {
        break missingId;
      }

      id = R.id.pie_card_view;
      MaterialCardView pieCardView = ViewBindings.findChildViewById(rootView, id);
      if (pieCardView == null) {
        break missingId;
      }

      return new FragmentAnalysisBinding((ScrollView) rootView, analysisRecyclerview,
          analysisTypeCardView, chipCustom, chipGroup, chipLayout, chipMonthly, chipWeekly,
          expenseAnalysisText, fragmentPieChart, pieCardView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
